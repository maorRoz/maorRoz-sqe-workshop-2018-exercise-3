[{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\app.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":11,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[532,532],"text":";"}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import $ from 'jquery';\r\nimport {parseCode} from './code-analyzer';\r\nimport { createMethodAndArguments } from './controller/elementsTableController'; \r\nimport { symbolicSubstitution } from './controller/symbolicSubstituter';\r\nimport toEvalParsedMethod from './controller/evaluator';\r\nimport  createOutputFunction from '../view';\r\n\r\nconst argumentsTextIntoValues = () => {\r\n    const argumentsText = $('#argumentsLine').val().split(',');\r\n    return argumentsText.map(argument => argument.length > 0 ?  JSON.parse(argument) : '');\r\n}\r\n\r\n$(document).ready(function () {\r\n    $('#codeSubmissionButton').click(() => {\r\n        const codeToParse = $('#codePlaceholder').val();\r\n        const parsedCode = parseCode(codeToParse);\r\n        const method = createMethodAndArguments(parsedCode);\r\n        global.subtitutedMethod = symbolicSubstitution(method);\r\n        const argumentsValues = argumentsTextIntoValues();\r\n        toEvalParsedMethod(argumentsValues);\r\n        $('#parsedCode #codeLine' ).remove();\r\n        createOutputFunction($('#parsedCode'));\r\n    });\r\n});"},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\code-analyzer.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\controller\\elementsTableController.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":26,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[909,909],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":91,"column":107,"nodeType":"VariableDeclaration","fix":{"range":[3392,3392],"text":";"}}],"errorCount":2,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import FunctionLine from '../model/FunctionLine';\r\nimport AssignmentLine from '../model/AssignmentLine';\r\nimport ReturnLine from '../model/ReturnLine';\r\nimport WhileLine from '../model/WhileLine';\r\nimport IfLine from '../model/IfLine';\r\nimport ElseIfLine from '../model/ElseIfLine';\r\nimport ElseLine from '../model/ElseLine';\r\n\r\nlet functionTableModel;\r\n\r\nconst returnStatementTabler = (returnStatement) => {\r\n    const returnLine = new ReturnLine(returnStatement);\r\n    return returnLine;\r\n};\r\n\r\nconst expressionStatementTabler = (expressionStatement) => {\r\n    const { expression } = expressionStatement;\r\n    const assignmentLine = new AssignmentLine(expression);\r\n    return assignmentLine;\r\n};\r\n\r\nconst whileStatementTabler = (whileStatement) => {\r\n    const whileBody = expressionBodyTabler(whileStatement.body);\r\n    const whileLine = new WhileLine(whileStatement, whileBody);\r\n    return whileLine;\r\n}\r\n\r\nconst alternateTabler = (alternate) => {\r\n    if(!alternate) return;\r\n    const { type } = alternate;\r\n    if(type === 'IfStatement'){\r\n        return ifStatementTabler(alternate, true);\r\n    }\r\n    const alternateBody = expressionBodyTabler(alternate);\r\n    const elseLine = new ElseLine(alternateBody);\r\n    return elseLine;\r\n};\r\n\r\nconst ifStatementTabler = (ifStatement, isElse = false) => {\r\n    const { alternate, consequent} = ifStatement;\r\n    const ifBody = expressionBodyTabler(consequent);\r\n    const ifAlternate =  alternateTabler(alternate);\r\n    const ifLine = isElse ? new ElseIfLine(ifStatement, ifBody, ifAlternate) : new IfLine(ifStatement, ifBody, ifAlternate);\r\n    return ifLine;\r\n};\r\n\r\nconst variableDeclaratorTabler = (declarationsContainer) => {\r\n    const { declarations } = declarationsContainer;\r\n    const assignments = declarations.map(declaration => new AssignmentLine({ left: declaration.id,  right: declaration.init}));\r\n    return assignments;\r\n};\r\n\r\nconst functionTabler = (functionObject) => {\r\n    const { params, body } = functionObject;\r\n    const parameters  = params.map(param => param.name);\r\n    const functionBody = expressionBodyTabler(body);\r\n    functionTableModel = new FunctionLine(functionObject, functionBody, parameters);\r\n};\r\n\r\nconst expressionBodyTabler = (objectStatements) => {\r\n    const { type, body } = objectStatements;\r\n    if(type !== 'BlockStatement'){\r\n        const newElement = elementTabler(objectStatements);\r\n        return newElement.length ? newElement : [ newElement ];\r\n    }\r\n\r\n    const elementsBody = [];\r\n    for(let i = 0; i < body.length; i++){\r\n        const newElement = elementTabler(body[i]);\r\n        newElement.length ? newElement.forEach(element => elementsBody.push(element)) : elementsBody.push(newElement);\r\n    }\r\n    return elementsBody.filter((element) => element != null && element!= undefined);\r\n};\r\n\r\nconst tableTypesMethods = {\r\n    FunctionDeclaration: functionTabler,\r\n    VariableDeclaration: variableDeclaratorTabler,\r\n    ExpressionStatement: expressionStatementTabler,\r\n    WhileStatement: whileStatementTabler,\r\n    IfStatement: ifStatementTabler,\r\n    ReturnStatement: returnStatementTabler\r\n};\r\n\r\nconst elementTabler = (object) =>\r\n{\r\n    const { type } = object;\r\n    let methodType = tableTypesMethods[type];\r\n    return methodType ? methodType(object) : null;\r\n};\r\n\r\nconst bodyTabler = (parsedCodeBody) => parsedCodeBody.length > 0 ? elementTabler(parsedCodeBody[0]) : null\r\n\r\nexport const createMethodAndArguments = (parsedCode) => {\r\n    const { body } = parsedCode;\r\n    bodyTabler(body);\r\n    return functionTableModel;\r\n};"},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\controller\\evaluator.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":10,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[301,301],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":19,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[813,813],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":28,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1218,1218],"text":";"}}],"errorCount":3,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"\r\n\r\nconst evalCondition = (valueMapper, condition) => {\r\n    let toEvalCondition = condition;\r\n    valueMapper.forEach(entry => toEvalCondition = toEvalCondition.replace(new RegExp(entry.name, 'g'), entry.value));\r\n    const result = eval(toEvalCondition);\r\n    return result ? 'green' : 'red';\r\n\r\n\r\n}\r\n\r\nconst toEvalObject = (valueMapper, object, negativePreviousCondition) => {\r\n    const { lineCondition, lineBody, alternate } = object;\r\n    const condition = lineCondition || negativePreviousCondition;\r\n    object.conditionColor = condition ? evalCondition(valueMapper, condition) : undefined;\r\n    object.lineBody = lineBody.length > 0 ? toEvalBody(valueMapper, lineBody) : []; \r\n    object.alternate = alternate ? toEvalObject(valueMapper, alternate, `!(${condition})`) : undefined;\r\n    return object; \r\n}\r\n\r\nconst toEvalBody = (valueMapper, body) => body.map(statement => toEvalObject(valueMapper, statement));\r\n\r\nconst toEvalParsedMethod = (argumentsValues) => {\r\n    const method = global.subtitutedMethod;\r\n    const valueMapper = method.parameters\r\n        .map((parameter, index) => ({name: parameter, value: argumentsValues[index]}));\r\n    method.lineBody = toEvalBody(valueMapper, method.lineBody); \r\n}\r\n\r\n\r\nexport default toEvalParsedMethod;"},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\controller\\symbolicSubstituter.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":9,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[198,198],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":12,"column":66,"nodeType":"VariableDeclaration","fix":{"range":[322,322],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":17,"column":7,"nodeType":"ExpressionStatement","fix":{"range":[576,576],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":20,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[605,605],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":31,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1112,1112],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":38,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1314,1314],"text":";"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 5.","line":49,"column":1,"nodeType":"Keyword","endLine":49,"endColumn":6,"fix":{"range":[1694,1699],"text":"    "}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":50,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1724,1724],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":54,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1893,1893],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":66,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[2269,2269],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":72,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[2402,2402],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":84,"column":73,"nodeType":"ExpressionStatement","fix":{"range":[2974,2974],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":90,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[3028,3028],"text":";"}}],"errorCount":13,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"\r\nlet globals;\r\n\r\nconst handleElse = (elseStatement, locals) => {\r\n    const { lineBody } = elseStatement;\r\n    elseStatement.lineBody = handleBody(lineBody, locals);\r\n\r\n    return elseStatement;\r\n}\r\n\r\nconst subtituteExpression = (expression, locals) => {\r\n    const variables = expression.split(/>|<|!==|==|===|[()+-/*]/)\r\n    variables.forEach(variable => {\r\n        const existLocal = locals.find(local => local.name === variable);\r\n        expression = existLocal ? expression\r\n            .replace(new RegExp(variable, 'g'), `(${existLocal.value})`) : expression;\r\n    })\r\n\r\n    return expression;\r\n}\r\n\r\nconst handleAssignment = (assignment, locals) => {\r\n    const extendedLocals = locals.filter(local => local.name !== assignment.lineName);\r\n\r\n    const subtitutedExpression = subtituteExpression(assignment.lineValue, locals);\r\n    assignment.lineValue = subtitutedExpression;\r\n    extendedLocals.push({ name: assignment.lineName, value: assignment.lineValue });\r\n\r\n    const toSubmit = globals.includes(assignment.lineName);\r\n    return { extendedLocals, newAssignment: toSubmit? assignment : null };\r\n}\r\n\r\nconst handleReturn = (returnStatemnt, locals) => {\r\n    const { lineValue } = returnStatemnt;\r\n    returnStatemnt.lineValue = subtituteExpression(lineValue, locals);\r\n\r\n    return returnStatemnt;\r\n}\r\n\r\nconst testExpressionToSubstitute = (testExpression, locals) => subtituteExpression(testExpression, locals);\r\n\r\nconst handleWhile = (whileStatement, locals) => {\r\n    const { lineCondition, lineBody} = whileStatement;\r\n\r\n    whileStatement.lineCondition = testExpressionToSubstitute(lineCondition, locals);\r\n    \r\n    whileStatement.lineBody = handleBody(lineBody, locals);\r\n\r\n     return whileStatement;\r\n}\r\n\r\nconst handleAlternate = (alternate, locals) => {\r\n    return alternate.lineType === 'elseStatement' ? handleElse(alternate, locals) : handleIf(alternate, locals);\r\n}\r\n\r\nconst handleIf = (ifStatement, locals) => {\r\n    const { lineCondition, lineBody, alternate } = ifStatement;\r\n\r\n    ifStatement.lineCondition = testExpressionToSubstitute(lineCondition, locals);\r\n    \r\n    ifStatement.lineBody = handleBody(lineBody, locals);\r\n\r\n    ifStatement.alternate = alternate? handleAlternate(alternate, locals): null;\r\n\r\n    return ifStatement;\r\n}\r\n\r\nconst typeCodeToSubtitute = {\r\n    ifStatement: handleIf,\r\n    whileStatement: handleWhile,\r\n    returnStatement: handleReturn\r\n}\r\n\r\nconst handleBody = (body, locals) => {\r\n    const submittedBody = [];\r\n    body.forEach(statement => {\r\n        const type = statement.lineType;\r\n        if(type === 'assignmentExpression'){\r\n            const {extendedLocals, newAssignment } = handleAssignment(statement, locals);\r\n            locals = extendedLocals;\r\n            newAssignment ? submittedBody.push(newAssignment) : null;\r\n        } else {\r\n            const methodCodeToSubtitute = typeCodeToSubtitute[type] || (() => null);\r\n            submittedBody.push(methodCodeToSubtitute(statement, locals))\r\n        }\r\n    });\r\n\r\n    return submittedBody;\r\n\r\n}\r\n\r\nexport const symbolicSubstitution = (method) => {\r\n    const locals = [];\r\n    globals = method.parameters;\r\n    method.lineBody =  handleBody(method.lineBody, locals);\r\n    return method;\r\n};"},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\AssignmentLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\ElseIfLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\ElseLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\FunctionLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\IfLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\Line.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\ReturnLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\model\\WhileLine.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\util-test.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\js\\valueExtractor.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"C:\\Users\\Morpheus\\Documents\\dev\\maorroz-sqe-workshop-2018-exercise-2\\src\\view.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":23,"nodeType":"Literal","endLine":7,"endColumn":46,"fix":{"range":[193,216],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":8,"column":17,"nodeType":"Literal","endLine":8,"endColumn":30,"fix":{"range":[236,249],"text":"'margin-left'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":11,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[347,347],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":15,"column":23,"nodeType":"Literal","endLine":15,"endColumn":46,"fix":{"range":[537,560],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":16,"column":17,"nodeType":"Literal","endLine":16,"endColumn":30,"fix":{"range":[580,593],"text":"'margin-left'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":22,"column":23,"nodeType":"Literal","endLine":22,"endColumn":46,"fix":{"range":[785,808],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":23,"column":17,"nodeType":"Literal","endLine":23,"endColumn":30,"fix":{"range":[828,841],"text":"'margin-left'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":26,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[931,931],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":33,"column":23,"nodeType":"Literal","endLine":33,"endColumn":46,"fix":{"range":[1242,1265],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":34,"column":17,"nodeType":"Literal","endLine":34,"endColumn":30,"fix":{"range":[1285,1298],"text":"'margin-left'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":39,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1527,1527],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":47,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[1774,1774],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":51,"column":23,"nodeType":"Literal","endLine":51,"endColumn":46,"fix":{"range":[1895,1918],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":52,"column":17,"nodeType":"Literal","endLine":52,"endColumn":30,"fix":{"range":[1938,1951],"text":"'margin-left'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":61,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[2294,2294],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":74,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[2789,2789],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":83,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[3078,3078],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":88,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[3285,3285],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":93,"column":92,"nodeType":"VariableDeclaration","fix":{"range":[3489,3489],"text":";"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":94,"column":23,"nodeType":"Literal","endLine":94,"endColumn":46,"fix":{"range":[3513,3536],"text":"'<span id=\\'codeLine\\'/>'"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":102,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[3744,3744],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":108,"column":2,"nodeType":"VariableDeclaration","fix":{"range":[3865,3865],"text":";"}}],"errorCount":22,"warningCount":0,"fixableErrorCount":22,"fixableWarningCount":0,"source":"import $ from 'jquery';\r\n\r\nlet outputBox;\r\n\r\nconst returnCodeTextToSpan = (retunObject, identationLevel) => {\r\n    const returnText = `return ${retunObject.lineValue};`;\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.css(\"margin-left\",  `${identationLevel * 10}px`);\r\n    newSpan.text(returnText);\r\n    outputBox.append(newSpan);\r\n}\r\n\r\nconst assignmentTextToSpan = (assignmentObject, identationLevel) => {\r\n    const assignmentText = `${assignmentObject.lineName} = ${assignmentObject.lineValue};`;\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.css(\"margin-left\",  `${identationLevel * 10}px`);\r\n    newSpan.text(assignmentText);\r\n    outputBox.append(newSpan);\r\n};\r\n\r\nconst codeTextToSpanClosingScope = (identationLevel = 0) => {\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.css(\"margin-left\", `${identationLevel * 10}px`);\r\n    newSpan.text('}');\r\n    outputBox.append(newSpan);\r\n}\r\n\r\nconst codeTextToSpanBody = (object, identationLevel) => object.lineBody\r\n    .forEach(element => codeTextToSpan(element, identationLevel));\r\n\r\nconst codeTextToSpanTest = (objectPrefix, object, identationLevel) => {\r\n    const objectText = `${objectPrefix}(${object.lineCondition}){`;\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.css(\"margin-left\",  `${identationLevel * 10}px`);\r\n    const testColor = object.conditionColor === 'green' ? '#7FFF00' : '#DC143C';\r\n    newSpan.css('background-color', testColor);\r\n    newSpan.text(objectText);\r\n    outputBox.append(newSpan);\r\n}\r\n\r\nconst whileCodeTextToSpan = (whileObject, identationLevel) => {\r\n    codeTextToSpanTest('while', whileObject, identationLevel);\r\n\r\n    codeTextToSpanBody(whileObject, identationLevel + 1);\r\n\r\n    codeTextToSpanClosingScope(identationLevel);\r\n}\r\n\r\nconst elseCodeTextToSpan = (elseObject, identationLevel) => {\r\n    const elseText = 'else {';\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.css(\"margin-left\",  `${identationLevel * 10}px`);\r\n    const testColor = elseObject.conditionColor === 'green' ? '#7FFF00' : '#DC143C';\r\n    newSpan.css('background-color', testColor);\r\n    newSpan.text(elseText);\r\n    outputBox.append(newSpan);\r\n\r\n    codeTextToSpanBody(elseObject, identationLevel + 1);\r\n\r\n    codeTextToSpanClosingScope(identationLevel);\r\n}\r\n\r\nconst elseIfCodeTextToSpan = (elseIfObject, identationLevel) => ifCodeTextToSpan(elseIfObject, identationLevel, true);\r\n\r\nconst ifCodeTextToSpan = (ifObject, identationLevel, isElse = false) => {\r\n    codeTextToSpanTest(isElse? 'else if' : 'if', ifObject, identationLevel);\r\n\r\n    codeTextToSpanBody(ifObject, identationLevel + 1);\r\n\r\n    codeTextToSpanClosingScope(identationLevel);\r\n\r\n    const { alternate } = ifObject;\r\n    alternate? codeTextToSpan(alternate, identationLevel): null;\r\n}\r\n\r\nconst typeCodeTextToSpan = {\r\n    ifStatement: ifCodeTextToSpan,\r\n    elseIfStatement: elseIfCodeTextToSpan,\r\n    elseStatement: elseCodeTextToSpan,\r\n    whileStatement: whileCodeTextToSpan,\r\n    returnStatement: returnCodeTextToSpan,\r\n    assignmentExpression: assignmentTextToSpan\r\n}\r\n\r\nconst codeTextToSpan = (element = {}, identationLevel) => {\r\n    const methodCodeTextToSpan = typeCodeTextToSpan[element.lineType] || (() => null);\r\n    methodCodeTextToSpan(element, identationLevel);\r\n}\r\n\r\nconst createFunctionSpans = () =>{\r\n    const parametersText = global.subtitutedMethod.parameters.join();\r\n\r\n    const functionText = `function ${global.subtitutedMethod.lineName}(${parametersText}){`\r\n    const newSpan = $(\"<span id='codeLine'/>\");\r\n    newSpan.text(functionText);\r\n    outputBox.append(newSpan);\r\n\r\n    const identationLevel = 1;\r\n    codeTextToSpanBody(global.subtitutedMethod, identationLevel);\r\n\r\n    codeTextToSpanClosingScope();\r\n}\r\n\r\n\r\nconst createOutputFunction = (givenOutputBox ) => {\r\n    outputBox = givenOutputBox;\r\n    createFunctionSpans();\r\n}\r\n\r\nexport default createOutputFunction;"}]